// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `convert_keywords`, `get_instance`, `init_global`, `new`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JiebaKeyword>>
abstract class JiebaKeyword implements RustOpaqueInterface {
  String get keyword;

  double get weight;

  set keyword(String keyword);

  set weight(double weight);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<JiebaRs>>
abstract class JiebaRs implements RustOpaqueInterface {
  static Future<List<String>> cut({required String text, required bool hmm}) =>
      RustLib.instance.api.crateApiJiebaJiebaRsCut(text: text, hmm: hmm);

  static Future<List<String>> cutAll({required String text}) =>
      RustLib.instance.api.crateApiJiebaJiebaRsCutAll(text: text);

  static Future<List<String>> cutForSearch({
    required String text,
    required bool hmm,
  }) => RustLib.instance.api.crateApiJiebaJiebaRsCutForSearch(
    text: text,
    hmm: hmm,
  );

  static Future<List<JiebaKeyword>> extractKeywordsTextRank({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  }) => RustLib.instance.api.crateApiJiebaJiebaRsExtractKeywordsTextRank(
    text: text,
    topK: topK,
    allowedPos: allowedPos,
  );

  static Future<List<JiebaKeyword>> extractKeywordsTfidf({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  }) => RustLib.instance.api.crateApiJiebaJiebaRsExtractKeywordsTfidf(
    text: text,
    topK: topK,
    allowedPos: allowedPos,
  );
}
