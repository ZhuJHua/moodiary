// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/aes.dart';
import 'api/argon2.dart';
import 'api/compress.dart';
import 'api/constants.dart';
import 'api/font.dart';
import 'api/jieba.dart';
import 'api/kmp.dart';
import 'api/zip.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiJiebaInitJieba();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 1609532906;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'moodiary_rust',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> crateApiAesAesEncryptionDecrypt({
    required List<int> key,
    required List<int> encryptedData,
  });

  Future<Uint8List> crateApiAesAesEncryptionDeriveKey({
    required String salt,
    required String userKey,
  });

  Future<Uint8List> crateApiAesAesEncryptionEncrypt({
    required List<int> key,
    required List<int> data,
  });

  Future<String?> crateApiArgon2Argon2RsHashPassword({
    required String password,
  });

  Future<bool> crateApiArgon2Argon2RsVerifyPassword({
    required String hash,
    required String password,
  });

  Future<String?> crateApiFontFontReaderGetFontNameFromTtf({
    required String ttfFilePath,
  });

  Future<Map<String, double>> crateApiFontFontReaderGetWghtAxisFromVfFont({
    required String ttfFilePath,
  });

  Future<Uint8List> crateApiCompressImageCompressContainWithOptions({
    required String filePath,
    CompressFormat? compressFormat,
    int? targetWidth,
    int? targetHeight,
    int? minWidth,
    int? minHeight,
    int? maxWidth,
    int? maxHeight,
    int? quality,
  });

  String crateApiJiebaJiebaKeywordAutoAccessorGetKeyword({
    required JiebaKeyword that,
  });

  double crateApiJiebaJiebaKeywordAutoAccessorGetWeight({
    required JiebaKeyword that,
  });

  void crateApiJiebaJiebaKeywordAutoAccessorSetKeyword({
    required JiebaKeyword that,
    required String keyword,
  });

  void crateApiJiebaJiebaKeywordAutoAccessorSetWeight({
    required JiebaKeyword that,
    required double weight,
  });

  Future<List<String>> crateApiJiebaJiebaRsCut({
    required String text,
    required bool hmm,
  });

  Future<List<String>> crateApiJiebaJiebaRsCutAll({required String text});

  Future<List<String>> crateApiJiebaJiebaRsCutForSearch({
    required String text,
    required bool hmm,
  });

  Future<List<JiebaKeyword>> crateApiJiebaJiebaRsExtractKeywordsTextRank({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  });

  Future<List<JiebaKeyword>> crateApiJiebaJiebaRsExtractKeywordsTfidf({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  });

  Future<List<String>> crateApiKmpKmpFindMatches({
    required String text,
    required List<String> patterns,
  });

  Future<String> crateApiKmpKmpReplaceWithKmp({
    required String text,
    required Map<String, String> replacements,
  });

  Future<void> crateApiZipZipAddDir({
    required Zip that,
    required String dirPath,
    required String basePath,
    String? password,
  });

  Future<void> crateApiZipZipAddFile({
    required Zip that,
    required String filePath,
    required String zipPath,
    String? password,
  });

  Future<void> crateApiZipZipExtract({
    required String zipPath,
    required String destDir,
    String? password,
  });

  Future<void> crateApiZipZipFinish({required Zip that});

  Zip crateApiZipZipNew({required String filePath});

  Future<Uint64List> crateApiKmpBuildPrefixTable({
    required List<String> pattern,
  });

  Future<void> crateApiJiebaInitJieba();

  Future<Uint64List> crateApiKmpKmpSearch({
    required String text,
    required String pattern,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_AesEncryption;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_AesEncryption;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_AesEncryptionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Argon2Rs;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Argon2Rs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Argon2RsPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FontReader;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FontReader;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FontReaderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageCompress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageCompress;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ImageCompressPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JiebaKeyword;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JiebaKeyword;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JiebaKeywordPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_JiebaRs;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_JiebaRs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JiebaRsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Kmp;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Kmp;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KmpPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Zip;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Zip;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ZipPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> crateApiAesAesEncryptionDecrypt({
    required List<int> key,
    required List<int> encryptedData,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(key, serializer);
          sse_encode_list_prim_u_8_loose(encryptedData, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAesAesEncryptionDecryptConstMeta,
        argValues: [key, encryptedData],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAesAesEncryptionDecryptConstMeta =>
      const TaskConstMeta(
        debugName: "AesEncryption_decrypt",
        argNames: ["key", "encryptedData"],
      );

  @override
  Future<Uint8List> crateApiAesAesEncryptionDeriveKey({
    required String salt,
    required String userKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(salt, serializer);
          sse_encode_String(userKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAesAesEncryptionDeriveKeyConstMeta,
        argValues: [salt, userKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAesAesEncryptionDeriveKeyConstMeta =>
      const TaskConstMeta(
        debugName: "AesEncryption_derive_key",
        argNames: ["salt", "userKey"],
      );

  @override
  Future<Uint8List> crateApiAesAesEncryptionEncrypt({
    required List<int> key,
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(key, serializer);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiAesAesEncryptionEncryptConstMeta,
        argValues: [key, data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAesAesEncryptionEncryptConstMeta =>
      const TaskConstMeta(
        debugName: "AesEncryption_encrypt",
        argNames: ["key", "data"],
      );

  @override
  Future<String?> crateApiArgon2Argon2RsHashPassword({
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiArgon2Argon2RsHashPasswordConstMeta,
        argValues: [password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiArgon2Argon2RsHashPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "Argon2Rs_hash_password",
        argNames: ["password"],
      );

  @override
  Future<bool> crateApiArgon2Argon2RsVerifyPassword({
    required String hash,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hash, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiArgon2Argon2RsVerifyPasswordConstMeta,
        argValues: [hash, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiArgon2Argon2RsVerifyPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "Argon2Rs_verify_password",
        argNames: ["hash", "password"],
      );

  @override
  Future<String?> crateApiFontFontReaderGetFontNameFromTtf({
    required String ttfFilePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ttfFilePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFontFontReaderGetFontNameFromTtfConstMeta,
        argValues: [ttfFilePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFontFontReaderGetFontNameFromTtfConstMeta =>
      const TaskConstMeta(
        debugName: "FontReader_get_font_name_from_ttf",
        argNames: ["ttfFilePath"],
      );

  @override
  Future<Map<String, double>> crateApiFontFontReaderGetWghtAxisFromVfFont({
    required String ttfFilePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ttfFilePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Map_String_f_32_None,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFontFontReaderGetWghtAxisFromVfFontConstMeta,
        argValues: [ttfFilePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFontFontReaderGetWghtAxisFromVfFontConstMeta =>
      const TaskConstMeta(
        debugName: "FontReader_get_wght_axis_from_vf_font",
        argNames: ["ttfFilePath"],
      );

  @override
  Future<Uint8List> crateApiCompressImageCompressContainWithOptions({
    required String filePath,
    CompressFormat? compressFormat,
    int? targetWidth,
    int? targetHeight,
    int? minWidth,
    int? minHeight,
    int? maxWidth,
    int? maxHeight,
    int? quality,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          sse_encode_opt_box_autoadd_compress_format(
            compressFormat,
            serializer,
          );
          sse_encode_opt_box_autoadd_u_32(targetWidth, serializer);
          sse_encode_opt_box_autoadd_u_32(targetHeight, serializer);
          sse_encode_opt_box_autoadd_u_32(minWidth, serializer);
          sse_encode_opt_box_autoadd_u_32(minHeight, serializer);
          sse_encode_opt_box_autoadd_u_32(maxWidth, serializer);
          sse_encode_opt_box_autoadd_u_32(maxHeight, serializer);
          sse_encode_opt_box_autoadd_u_8(quality, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiCompressImageCompressContainWithOptionsConstMeta,
        argValues: [
          filePath,
          compressFormat,
          targetWidth,
          targetHeight,
          minWidth,
          minHeight,
          maxWidth,
          maxHeight,
          quality,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCompressImageCompressContainWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "ImageCompress_contain_with_options",
        argNames: [
          "filePath",
          "compressFormat",
          "targetWidth",
          "targetHeight",
          "minWidth",
          "minHeight",
          "maxWidth",
          "maxHeight",
          "quality",
        ],
      );

  @override
  String crateApiJiebaJiebaKeywordAutoAccessorGetKeyword({
    required JiebaKeyword that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJiebaJiebaKeywordAutoAccessorGetKeywordConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaKeywordAutoAccessorGetKeywordConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaKeyword_auto_accessor_get_keyword",
        argNames: ["that"],
      );

  @override
  double crateApiJiebaJiebaKeywordAutoAccessorGetWeight({
    required JiebaKeyword that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJiebaJiebaKeywordAutoAccessorGetWeightConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaKeywordAutoAccessorGetWeightConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaKeyword_auto_accessor_get_weight",
        argNames: ["that"],
      );

  @override
  void crateApiJiebaJiebaKeywordAutoAccessorSetKeyword({
    required JiebaKeyword that,
    required String keyword,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
            that,
            serializer,
          );
          sse_encode_String(keyword, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJiebaJiebaKeywordAutoAccessorSetKeywordConstMeta,
        argValues: [that, keyword],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaKeywordAutoAccessorSetKeywordConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaKeyword_auto_accessor_set_keyword",
        argNames: ["that", "keyword"],
      );

  @override
  void crateApiJiebaJiebaKeywordAutoAccessorSetWeight({
    required JiebaKeyword that,
    required double weight,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
            that,
            serializer,
          );
          sse_encode_f_64(weight, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJiebaJiebaKeywordAutoAccessorSetWeightConstMeta,
        argValues: [that, weight],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaKeywordAutoAccessorSetWeightConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaKeyword_auto_accessor_set_weight",
        argNames: ["that", "weight"],
      );

  @override
  Future<List<String>> crateApiJiebaJiebaRsCut({
    required String text,
    required bool hmm,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_bool(hmm, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiJiebaJiebaRsCutConstMeta,
        argValues: [text, hmm],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaRsCutConstMeta =>
      const TaskConstMeta(debugName: "JiebaRs_cut", argNames: ["text", "hmm"]);

  @override
  Future<List<String>> crateApiJiebaJiebaRsCutAll({required String text}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiJiebaJiebaRsCutAllConstMeta,
        argValues: [text],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaRsCutAllConstMeta =>
      const TaskConstMeta(debugName: "JiebaRs_cut_all", argNames: ["text"]);

  @override
  Future<List<String>> crateApiJiebaJiebaRsCutForSearch({
    required String text,
    required bool hmm,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_bool(hmm, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiJiebaJiebaRsCutForSearchConstMeta,
        argValues: [text, hmm],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaRsCutForSearchConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaRs_cut_for_search",
        argNames: ["text", "hmm"],
      );

  @override
  Future<List<JiebaKeyword>> crateApiJiebaJiebaRsExtractKeywordsTextRank({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_usize(topK, serializer);
          sse_encode_list_String(allowedPos, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiJiebaJiebaRsExtractKeywordsTextRankConstMeta,
        argValues: [text, topK, allowedPos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaRsExtractKeywordsTextRankConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaRs_extract_keywords_text_rank",
        argNames: ["text", "topK", "allowedPos"],
      );

  @override
  Future<List<JiebaKeyword>> crateApiJiebaJiebaRsExtractKeywordsTfidf({
    required String text,
    required BigInt topK,
    required List<String> allowedPos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_usize(topK, serializer);
          sse_encode_list_String(allowedPos, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiJiebaJiebaRsExtractKeywordsTfidfConstMeta,
        argValues: [text, topK, allowedPos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaJiebaRsExtractKeywordsTfidfConstMeta =>
      const TaskConstMeta(
        debugName: "JiebaRs_extract_keywords_tfidf",
        argNames: ["text", "topK", "allowedPos"],
      );

  @override
  Future<List<String>> crateApiKmpKmpFindMatches({
    required String text,
    required List<String> patterns,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_list_String(patterns, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKmpKmpFindMatchesConstMeta,
        argValues: [text, patterns],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKmpKmpFindMatchesConstMeta => const TaskConstMeta(
    debugName: "Kmp_find_matches",
    argNames: ["text", "patterns"],
  );

  @override
  Future<String> crateApiKmpKmpReplaceWithKmp({
    required String text,
    required Map<String, String> replacements,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_Map_String_String_None(replacements, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKmpKmpReplaceWithKmpConstMeta,
        argValues: [text, replacements],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKmpKmpReplaceWithKmpConstMeta =>
      const TaskConstMeta(
        debugName: "Kmp_replace_with_kmp",
        argNames: ["text", "replacements"],
      );

  @override
  Future<void> crateApiZipZipAddDir({
    required Zip that,
    required String dirPath,
    required String basePath,
    String? password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
            that,
            serializer,
          );
          sse_encode_String(dirPath, serializer);
          sse_encode_String(basePath, serializer);
          sse_encode_opt_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiZipZipAddDirConstMeta,
        argValues: [that, dirPath, basePath, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiZipZipAddDirConstMeta => const TaskConstMeta(
    debugName: "Zip_add_dir",
    argNames: ["that", "dirPath", "basePath", "password"],
  );

  @override
  Future<void> crateApiZipZipAddFile({
    required Zip that,
    required String filePath,
    required String zipPath,
    String? password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
            that,
            serializer,
          );
          sse_encode_String(filePath, serializer);
          sse_encode_String(zipPath, serializer);
          sse_encode_opt_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiZipZipAddFileConstMeta,
        argValues: [that, filePath, zipPath, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiZipZipAddFileConstMeta => const TaskConstMeta(
    debugName: "Zip_add_file",
    argNames: ["that", "filePath", "zipPath", "password"],
  );

  @override
  Future<void> crateApiZipZipExtract({
    required String zipPath,
    required String destDir,
    String? password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(zipPath, serializer);
          sse_encode_String(destDir, serializer);
          sse_encode_opt_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiZipZipExtractConstMeta,
        argValues: [zipPath, destDir, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiZipZipExtractConstMeta => const TaskConstMeta(
    debugName: "Zip_extract",
    argNames: ["zipPath", "destDir", "password"],
  );

  @override
  Future<void> crateApiZipZipFinish({required Zip that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiZipZipFinishConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiZipZipFinishConstMeta =>
      const TaskConstMeta(debugName: "Zip_finish", argNames: ["that"]);

  @override
  Zip crateApiZipZipNew({required String filePath}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiZipZipNewConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiZipZipNewConstMeta =>
      const TaskConstMeta(debugName: "Zip_new", argNames: ["filePath"]);

  @override
  Future<Uint64List> crateApiKmpBuildPrefixTable({
    required List<String> pattern,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_Char(pattern, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_usize_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKmpBuildPrefixTableConstMeta,
        argValues: [pattern],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKmpBuildPrefixTableConstMeta =>
      const TaskConstMeta(
        debugName: "build_prefix_table",
        argNames: ["pattern"],
      );

  @override
  Future<void> crateApiJiebaInitJieba() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiJiebaInitJiebaConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJiebaInitJiebaConstMeta =>
      const TaskConstMeta(debugName: "init_jieba", argNames: []);

  @override
  Future<Uint64List> crateApiKmpKmpSearch({
    required String text,
    required String pattern,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_String(pattern, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_usize_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiKmpKmpSearchConstMeta,
        argValues: [text, pattern],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiKmpKmpSearchConstMeta => const TaskConstMeta(
    debugName: "kmp_search",
    argNames: ["text", "pattern"],
  );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_AesEncryption =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_AesEncryption =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Argon2Rs =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Argon2Rs =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FontReader =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FontReader =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageCompress =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageCompress =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JiebaKeyword =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JiebaKeyword =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JiebaRs =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JiebaRs =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Kmp =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Kmp =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Zip =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Zip =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AesEncryption
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AesEncryptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Argon2Rs
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Argon2RsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FontReader
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FontReaderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageCompress
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageCompressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaKeyword
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaRs
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaRsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Kmp
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KmpImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Zip
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZipImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaKeyword
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Zip
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZipImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaKeyword
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_Char(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return String.fromCharCode(raw);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  Map<String, double> dco_decode_Map_String_f_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_f_32(raw).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  AesEncryption
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AesEncryptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Argon2Rs
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Argon2RsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FontReader
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FontReaderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageCompress
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageCompressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaKeyword
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JiebaRs
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JiebaRsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Kmp
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KmpImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Zip
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZipImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CompressFormat dco_decode_box_autoadd_compress_format(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_compress_format(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CompressFormat dco_decode_compress_format(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CompressFormat.values[raw as int];
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<JiebaKeyword>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_Char(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Char).toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<(String, double)> dco_decode_list_record_string_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_f_32).toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  CompressFormat? dco_decode_opt_box_autoadd_compress_format(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_compress_format(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  (String, double) dco_decode_record_string_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_f_32(arr[1]));
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AesEncryption
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AesEncryptionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Argon2Rs
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Argon2RsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FontReader
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FontReaderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageCompress
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageCompressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaKeyword
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaRs
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaRsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Kmp
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KmpImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Zip
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZipImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaKeyword
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Zip
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZipImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaKeyword
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_Char(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, double> sse_decode_Map_String_f_32_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_f_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  AesEncryption
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AesEncryptionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Argon2Rs
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Argon2RsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FontReader
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FontReaderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageCompress
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageCompressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaKeyword
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaKeywordImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JiebaRs
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JiebaRsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Kmp
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KmpImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Zip
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZipImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CompressFormat sse_decode_box_autoadd_compress_format(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_compress_format(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  CompressFormat sse_decode_compress_format(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return CompressFormat.values[inner];
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<JiebaKeyword>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <JiebaKeyword>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_Char(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Char(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<(String, double)> sse_decode_list_record_string_f_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_f_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CompressFormat? sse_decode_opt_box_autoadd_compress_format(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_compress_format(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, double) sse_decode_record_string_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    AesEncryption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AesEncryptionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    Argon2Rs self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Argon2RsImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    FontReader self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FontReaderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    ImageCompress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageCompressImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    JiebaKeyword self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaKeywordImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    JiebaRs self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaRsImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    Kmp self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KmpImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    Zip self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ZipImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    JiebaKeyword self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaKeywordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    Zip self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ZipImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    JiebaKeyword self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaKeywordImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Char(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self, serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_f_32_None(
    Map<String, double> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_f_32(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAesEncryption(
    AesEncryption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AesEncryptionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArgon2Rs(
    Argon2Rs self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Argon2RsImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFontReader(
    FontReader self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FontReaderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageCompress(
    ImageCompress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageCompressImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    JiebaKeyword self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaKeywordImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaRs(
    JiebaRs self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JiebaRsImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKmp(
    Kmp self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KmpImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZip(
    Zip self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ZipImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_compress_format(
    CompressFormat self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_compress_format(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_compress_format(
    CompressFormat self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
    List<JiebaKeyword> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJiebaKeyword(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_Char(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Char(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
    Uint64List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_record_string_f_32(
    List<(String, double)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_f_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_compress_format(
    CompressFormat? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_compress_format(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_f_32(
    (String, double) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AesEncryptionImpl extends RustOpaque implements AesEncryption {
  // Not to be used by end users
  AesEncryptionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AesEncryptionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AesEncryption,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AesEncryption,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AesEncryptionPtr,
  );
}

@sealed
class Argon2RsImpl extends RustOpaque implements Argon2Rs {
  // Not to be used by end users
  Argon2RsImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Argon2RsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Argon2Rs,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Argon2Rs,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Argon2RsPtr,
  );
}

@sealed
class FontReaderImpl extends RustOpaque implements FontReader {
  // Not to be used by end users
  FontReaderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FontReaderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FontReader,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FontReader,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FontReaderPtr,
  );
}

@sealed
class ImageCompressImpl extends RustOpaque implements ImageCompress {
  // Not to be used by end users
  ImageCompressImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ImageCompressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ImageCompress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ImageCompress,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ImageCompressPtr,
  );
}

@sealed
class JiebaKeywordImpl extends RustOpaque implements JiebaKeyword {
  // Not to be used by end users
  JiebaKeywordImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JiebaKeywordImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JiebaKeyword,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JiebaKeyword,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JiebaKeywordPtr,
  );

  String get keyword => RustLib.instance.api
      .crateApiJiebaJiebaKeywordAutoAccessorGetKeyword(that: this);

  double get weight => RustLib.instance.api
      .crateApiJiebaJiebaKeywordAutoAccessorGetWeight(that: this);

  set keyword(String keyword) =>
      RustLib.instance.api.crateApiJiebaJiebaKeywordAutoAccessorSetKeyword(
        that: this,
        keyword: keyword,
      );

  set weight(double weight) =>
      RustLib.instance.api.crateApiJiebaJiebaKeywordAutoAccessorSetWeight(
        that: this,
        weight: weight,
      );
}

@sealed
class JiebaRsImpl extends RustOpaque implements JiebaRs {
  // Not to be used by end users
  JiebaRsImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JiebaRsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JiebaRs,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JiebaRs,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JiebaRsPtr,
  );
}

@sealed
class KmpImpl extends RustOpaque implements Kmp {
  // Not to be used by end users
  KmpImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KmpImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Kmp,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Kmp,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KmpPtr,
  );
}

@sealed
class ZipImpl extends RustOpaque implements Zip {
  // Not to be used by end users
  ZipImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ZipImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Zip,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Zip,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZipPtr,
  );

  Future<void> addDir({
    required String dirPath,
    required String basePath,
    String? password,
  }) => RustLib.instance.api.crateApiZipZipAddDir(
    that: this,
    dirPath: dirPath,
    basePath: basePath,
    password: password,
  );

  Future<void> addFile({
    required String filePath,
    required String zipPath,
    String? password,
  }) => RustLib.instance.api.crateApiZipZipAddFile(
    that: this,
    filePath: filePath,
    zipPath: zipPath,
    password: password,
  );

  Future<void> finish() =>
      RustLib.instance.api.crateApiZipZipFinish(that: this);
}
